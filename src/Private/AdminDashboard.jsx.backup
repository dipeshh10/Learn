import React, { useEffect, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { FaEdit, FaTrash, FaUser, FaUsers, FaChartBar, FaCalendarAlt, FaClipboardList, FaBook, FaMoneyBillWave, FaBell, FaGraduationCap } from "react-icons/fa";
import Slidebar from "../components/Slidebar.jsx";
import { useNavigate } from 'react-router-dom';
import logoIcon from '../assets/LearnX.png';

const AdminDashboard = () => {
  const navigate = useNavigate();
  
  // Auth check on mount
  useEffect(() => {
    const userStr = localStorage.getItem('user');
    const token = localStorage.getItem('token');
    let user = null;
    
    try {
      user = userStr ? JSON.parse(userStr) : null;
    } catch (error) {
      console.error('Error parsing user from localStorage:', error);
      localStorage.removeItem('user');
    }
    
    if (!token || !user || user.role !== 'admin') {
      navigate('/admin', { replace: true });
    }
  }, [navigate]);

  // Main section state
  const [section, setSection] = useState('home');

  // Data states with Roman Nepali sample data (reduced to 2 items each)
  const [students, setStudents] = useState([
    { _id: 1, name: 'Suman Karki', email: 'suman@learnx.np', course: 'Class 10A', fees: 'Rs. 50,000' },
    { _id: 2, name: 'Kritika Shrestha', email: 'kritika@learnx.np', course: 'Class 10B', fees: 'Rs. 25,000' }
  ]);
  
  const [routines, setRoutines] = useState([
    { _id: 1, subject: 'Mathematics', time: '9:00-10:00', teacher: 'Ram Bahadur', room: 'Room 101', day: 'Sunday' },
    { _id: 2, subject: 'English', time: '10:00-11:00', teacher: 'Sita Devi', room: 'Room 102', day: 'Monday' }
  ]);
  
  const [reports, setReports] = useState([
    { id: 1, title: 'Monthly Exam', student: 'Suman Karki', grades: 'A+', date: '2024/08/15' },
    { id: 2, title: 'Quarterly Exam', student: 'Kritika Shrestha', grades: 'A', date: '2024/08/20' }
  ]);
  
  const [attendanceList, setAttendanceList] = useState([
    { _id: 1, studentName: 'Suman Karki', class: 'Class 10A', status: 'Present', date: '2024/08/15' },
    { _id: 2, studentName: 'Kritika Shrestha', class: 'Class 10B', status: 'Absent', date: '2024/08/15' }
  ]);

  const [fees, setFees] = useState([
    { _id: 1, studentName: 'Suman Karki', class: 'Class 10A', amount: 'Rs. 50,000', status: 'Paid', dueDate: '2024/09/01' },
    { _id: 2, studentName: 'Kritika Shrestha', class: 'Class 10B', amount: 'Rs. 25,000', status: 'Pending', dueDate: '2024/09/15' }
  ]);

  const [learningMaterials, setLearningMaterials] = useState([
    { _id: 1, title: 'Mathematics Book', subject: 'Mathematics', class: 'Class 10A', type: 'PDF', uploadDate: '2024/08/10' },
    { _id: 2, title: 'English Grammar', subject: 'English', class: 'Class 10B', type: 'Video', uploadDate: '2024/08/12' }
  ]);

  const [notifications, setNotifications] = useState([
    { _id: 1, title: 'Exam Notice', message: 'Monthly exam will be held next week', priority: 'High', date: '2024/08/20' },
    { _id: 2, title: 'Holiday Notice', message: 'Tomorrow is public holiday', priority: 'Medium', date: '2024/08/22' }
  ]);

  const [courses, setCourses] = useState([
    { _id: 1, title: 'Basic Mathematics', description: 'Mathematics course for Class 10', instructor: 'Ram Bahadur', duration: '6 months', students: 25 },
    { _id: 2, title: 'English Language', description: 'English language course', instructor: 'Sita Devi', duration: '4 months', students: 30 }
  ]);

  // Loading states
  const [loadingStudents, setLoadingStudents] = useState(false);
  const [loadingRoutines, setLoadingRoutines] = useState(false);
  const [loadingReports, setLoadingReports] = useState(false);
  const [loadingAttendance, setLoadingAttendance] = useState(false);
  const [loadingFees, setLoadingFees] = useState(false);
  const [loadingMaterials, setLoadingMaterials] = useState(false);
  const [loadingNotifications, setLoadingNotifications] = useState(false);
  const [loadingCourses, setLoadingCourses] = useState(false);

  // Modal states for students
  const [showAddStudentModal, setShowAddStudentModal] = useState(false);
  const [showEditStudentModal, setShowEditStudentModal] = useState(false);
  const [studentForm, setStudentForm] = useState({ name: '', email: '', course: '', fees: '' });
  const [studentEditId, setStudentEditId] = useState(null);
  const [studentError, setStudentError] = useState('');

  // Modal states for reports
  const [showAddReportModal, setShowAddReportModal] = useState(false);
  const [showEditReportModal, setShowEditReportModal] = useState(false);
  const [reportForm, setReportForm] = useState({ title: '', student: '', grades: '' });
  const [reportEditId, setReportEditId] = useState(null);
  const [reportError, setReportError] = useState('');

  // Modal states for routines
  const [showAddRoutineModal, setShowAddRoutineModal] = useState(false);
  const [showEditRoutineModal, setShowEditRoutineModal] = useState(false);
  const [routineForm, setRoutineForm] = useState({ subject: '', time: '', teacher: '', room: '', day: '' });
  const [routineEditId, setRoutineEditId] = useState(null);
  const [routineError, setRoutineError] = useState('');

  // Modal states for attendance
  const [showAddAttendanceModal, setShowAddAttendanceModal] = useState(false);
  const [showEditAttendanceModal, setShowEditAttendanceModal] = useState(false);
  const [attendanceForm, setAttendanceForm] = useState({ studentName: '', class: '', status: 'उपस्थित', date: '' });
  const [attendanceEditId, setAttendanceEditId] = useState(null);
  const [attendanceError, setAttendanceError] = useState('');
  const [attendanceDate, setAttendanceDate] = useState(new Date().toISOString().split('T')[0]);

  // Modal states for fees
  const [showAddFeeModal, setShowAddFeeModal] = useState(false);
  const [showEditFeeModal, setShowEditFeeModal] = useState(false);
  const [feeForm, setFeeForm] = useState({ studentName: '', class: '', amount: '', status: 'बाँकी', dueDate: '' });
  const [feeEditId, setFeeEditId] = useState(null);
  const [feeError, setFeeError] = useState('');

  // Modal states for learning materials
  const [showAddMaterialModal, setShowAddMaterialModal] = useState(false);
  const [showEditMaterialModal, setShowEditMaterialModal] = useState(false);
  const [materialForm, setMaterialForm] = useState({ title: '', subject: '', class: '', type: 'PDF' });
  const [materialEditId, setMaterialEditId] = useState(null);
  const [materialError, setMaterialError] = useState('');

  // Modal states for notifications
  const [showAddNotificationModal, setShowAddNotificationModal] = useState(false);
  const [showEditNotificationModal, setShowEditNotificationModal] = useState(false);
  const [notificationForm, setNotificationForm] = useState({ title: '', message: '', priority: 'सामान्य' });
  const [notificationEditId, setNotificationEditId] = useState(null);
  const [notificationError, setNotificationError] = useState('');

  // Database connection and localStorage sync functions
  const syncWithLocalStorage = (dataType, data) => {
    try {
      localStorage.setItem(dataType, JSON.stringify(data));
      // Trigger storage event for other tabs/components
      window.dispatchEvent(new StorageEvent('storage', {
        key: dataType,
        newValue: JSON.stringify(data)
      }));
    } catch (error) {
      console.error(`Failed to sync ${dataType} with localStorage:`, error);
    }
  };

  // Database API functions (to be connected to your backend)
  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';
  
  const apiCall = async (endpoint, method = 'GET', data = null) => {
    try {
      const token = localStorage.getItem('token');
      const config = {
        method,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': token ? `Bearer ${token}` : ''
        }
      };
      
      if (data && method !== 'GET') {
        config.body = JSON.stringify(data);
      }
      
      const response = await fetch(`${API_BASE_URL}${endpoint}`, config);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('API call failed:', error);
      throw error;
    }
  };

  // Load data from localStorage on component mount
  useEffect(() => {
    const loadStoredData = () => {
      try {
        const storedStudents = localStorage.getItem('students');
        const storedCourses = localStorage.getItem('courses');
        const storedRoutines = localStorage.getItem('routines');
        const storedReports = localStorage.getItem('reports');
        const storedAttendance = localStorage.getItem('attendance');
        const storedFees = localStorage.getItem('fees');
        const storedMaterials = localStorage.getItem('learningMaterials');
        const storedNotifications = localStorage.getItem('notifications');

        if (storedStudents) setStudents(JSON.parse(storedStudents));
        if (storedCourses) setCourses(JSON.parse(storedCourses));
        if (storedRoutines) setRoutines(JSON.parse(storedRoutines));
        if (storedReports) setReports(JSON.parse(storedReports));
        if (storedAttendance) setAttendanceList(JSON.parse(storedAttendance));
        if (storedFees) setFees(JSON.parse(storedFees));
        if (storedMaterials) setLearningMaterials(JSON.parse(storedMaterials));
        if (storedNotifications) setNotifications(JSON.parse(storedNotifications));
      } catch (error) {
        console.error('Failed to load data from localStorage:', error);
      }
    };

  // Modal states for courses
  const [showAddCourseModal, setShowAddCourseModal] = useState(false);
  const [showEditCourseModal, setShowEditCourseModal] = useState(false);
  const [courseForm, setCourseForm] = useState({ title: '', description: '', instructor: '', duration: '' });
  const [courseEditId, setCourseEditId] = useState(null);
  const [courseError, setCourseError] = useState('');

  // Enhanced CRUD Functions for Courses with database integration
  const handleAddCourse = async () => {
    try {
      setCourseError('');
      if (!courseForm.title || !courseForm.description || !courseForm.instructor || !courseForm.duration) {
        setCourseError('All fields are required');
        return;
      }
      
      setLoadingCourses(true);
      const newCourse = {
        _id: Date.now(),
        title: courseForm.title,
        description: courseForm.description,
        instructor: courseForm.instructor,
        duration: courseForm.duration,
        students: 0
      };

      // Try to save to database first
      try {
        const savedCourse = await apiCall('/courses', 'POST', newCourse);
        newCourse._id = savedCourse._id || newCourse._id;
      } catch (dbError) {
        console.warn('Database save failed, continuing with local storage:', dbError);
      }

      const updatedCourses = [...courses, newCourse];
      setCourses(updatedCourses);
      syncWithLocalStorage('courses', updatedCourses);
      
      setCourseForm({ title: '', description: '', instructor: '', duration: '' });
      setShowAddCourseModal(false);
    } catch (error) {
      setCourseError(error.message || 'Failed to add course');
    } finally {
      setLoadingCourses(false);
    }
  };

  const handleUpdateCourse = async () => {
    try {
      setCourseError('');
      if (!courseForm.title || !courseForm.description || !courseForm.instructor || !courseForm.duration) {
        setCourseError('All fields are required');
        return;
      }
      
      setLoadingCourses(true);

      // Try to update in database first
      try {
        await apiCall(`/courses/${courseEditId}`, 'PUT', courseForm);
      } catch (dbError) {
        console.warn('Database update failed, continuing with local storage:', dbError);
      }

      const updatedCourses = courses.map(c => 
        c._id === courseEditId ? { ...c, ...courseForm } : c
      );
      setCourses(updatedCourses);
      syncWithLocalStorage('courses', updatedCourses);
      
      setCourseForm({ title: '', description: '', instructor: '', duration: '' });
      setShowEditCourseModal(false);
      setCourseEditId(null);
    } catch (error) {
      setCourseError(error.message || 'Failed to update course');
    } finally {
      setLoadingCourses(false);
    }
  };

  const handleDeleteCourse = async (id) => {
    if (!confirm('Are you sure you want to delete this course?')) return;
    
    try {
      setLoadingCourses(true);

      // Try to delete from database first
      try {
        await apiCall(`/courses/${id}`, 'DELETE');
      } catch (dbError) {
        console.warn('Database delete failed, continuing with local storage:', dbError);
      }

      const updatedCourses = courses.filter(c => c._id !== id);
      setCourses(updatedCourses);
      syncWithLocalStorage('courses', updatedCourses);
    } catch (error) {
      alert('Failed to delete course: ' + error.message);
    } finally {
      setLoadingCourses(false);
    }
  };

  // Modal Component
  const Modal = ({ isOpen, onClose, title, children }) => {
    return (
      <AnimatePresence>
        {isOpen && (
          <motion.div
            className="modal-overlay"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            style={{
              position: 'fixed',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              backgroundColor: 'rgba(0, 0, 0, 0.5)',
              display: 'flex',
              justifyContent: 'center',
              alignItems: 'center',
              zIndex: 1000
            }}
            onClick={e => { if (e.target.classList.contains('modal-overlay')) onClose(); }}
          >
            <motion.div
              className="modal-content"
              initial={{ y: 50, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              exit={{ y: 50, opacity: 0 }}
              transition={{ type: "spring", stiffness: 260, damping: 26 }}
              style={{
                background: 'white',
                borderRadius: '12px',
                width: '500px',
                maxWidth: '90vw',
                maxHeight: '90vh',
                overflow: 'auto',
                boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)'
              }}
            >
              <div style={{
                padding: '20px 24px 16px',
                borderBottom: '1px solid #e5e7eb',
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                background: '#f9fafb'
              }}>
                <h2 style={{
                  margin: 0,
                  fontSize: '20px',
                  fontWeight: '600',
                  color: '#111827'
                }}>{title}</h2>
                <button 
                  onClick={onClose} 
                  style={{
                    background: 'none',
                    border: 'none',
                    fontSize: '24px',
                    cursor: 'pointer',
                    color: '#6b7280',
                    padding: '4px',
                    borderRadius: '4px'
                  }}
                  onMouseEnter={(e) => e.target.style.color = '#ef4444'}
                  onMouseLeave={(e) => e.target.style.color = '#6b7280'}
                >&times;</button>
              </div>
              <div style={{ padding: '24px' }}>
                {children}
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    );
  };

  // Enhanced CRUD Functions for Students with database integration
  const handleAddStudent = async () => {
    try {
      setStudentError('');
      if (!studentForm.name || !studentForm.email || !studentForm.course || !studentForm.fees) {
        setStudentError('All fields are required');
        return;
      }
      
      setLoadingStudents(true);
      const newStudent = {
        _id: Date.now(),
        name: studentForm.name,
        email: studentForm.email,
        course: studentForm.course,
        fees: studentForm.fees
      };

      // Try to save to database first
      try {
        const savedStudent = await apiCall('/students', 'POST', newStudent);
        newStudent._id = savedStudent._id || newStudent._id;
      } catch (dbError) {
        console.warn('Database save failed, continuing with local storage:', dbError);
      }

      const updatedStudents = [...students, newStudent];
      setStudents(updatedStudents);
      syncWithLocalStorage('students', updatedStudents);
      
      setStudentForm({ name: '', email: '', course: '', fees: '' });
      setShowAddStudentModal(false);
    } catch (error) {
      setStudentError(error.message || 'Failed to add student');
    } finally {
      setLoadingStudents(false);
    }
  };

  const handleUpdateStudent = async () => {
    try {
      setStudentError('');
      if (!studentForm.name || !studentForm.email || !studentForm.course || !studentForm.fees) {
        setStudentError('All fields are required');
        return;
      }
      
      setLoadingStudents(true);

      // Try to update in database first
      try {
        await apiCall(`/students/${studentEditId}`, 'PUT', studentForm);
      } catch (dbError) {
        console.warn('Database update failed, continuing with local storage:', dbError);
      }

      const updatedStudents = students.map(s => 
        s._id === studentEditId ? { ...s, ...studentForm } : s
      );
      setStudents(updatedStudents);
      syncWithLocalStorage('students', updatedStudents);
      
      setStudentForm({ name: '', email: '', course: '', fees: '' });
      setShowEditStudentModal(false);
      setStudentEditId(null);
    } catch (error) {
      setStudentError(error.message || 'Failed to update student');
    } finally {
      setLoadingStudents(false);
    }
  };

  const handleDeleteStudent = async (id) => {
    if (!confirm('Are you sure you want to delete this student?')) return;
    
    try {
      setLoadingStudents(true);

      // Try to delete from database first
      try {
        await apiCall(`/students/${id}`, 'DELETE');
      } catch (dbError) {
        console.warn('Database delete failed, continuing with local storage:', dbError);
      }

      const updatedStudents = students.filter(s => s._id !== id);
      setStudents(updatedStudents);
      syncWithLocalStorage('students', updatedStudents);
    } catch (error) {
      alert('Failed to delete student: ' + error.message);
    } finally {
      setLoadingStudents(false);
    }
  };

  // CRUD Functions for Reports
  const handleAddReport = async () => {
    try {
      setReportError('');
      if (!reportForm.title || !reportForm.student || !reportForm.grades) {
        setReportError('All fields are required');
        return;
      }
      
      setLoadingReports(true);
      const newReport = {
        id: Date.now(),
        title: reportForm.title,
        student: reportForm.student,
        grades: reportForm.grades,
        date: new Date().toISOString().split('T')[0]
      };
      setReports([...reports, newReport]);
      setReportForm({ title: '', student: '', grades: '' });
      setShowAddReportModal(false);
    } catch (error) {
      setReportError(error.message || 'Failed to add report');
    } finally {
      setLoadingReports(false);
    }
  };

  const handleUpdateReport = async () => {
    try {
      setReportError('');
      if (!reportForm.title || !reportForm.student || !reportForm.grades) {
        setReportError('All fields are required');
        return;
      }
      
      setLoadingReports(true);
      setReports(reports.map(r => 
        r.id === reportEditId ? { ...r, ...reportForm } : r
      ));
      setReportForm({ title: '', student: '', grades: '' });
      setShowEditReportModal(false);
      setReportEditId(null);
    } catch (error) {
      setReportError(error.message || 'Failed to update report');
    } finally {
      setLoadingReports(false);
    }
  };

  const handleDeleteReport = async (id) => {
    if (!confirm('Are you sure you want to delete this report?')) return;
    
    try {
      setLoadingReports(true);
      setReports(reports.filter(r => r.id !== id));
    } catch (error) {
      alert('Failed to delete report: ' + error.message);
    } finally {
      setLoadingReports(false);
    }
  };

  // CRUD Functions for Routines
  const handleAddRoutine = async () => {
    try {
      setRoutineError('');
      if (!routineForm.subject || !routineForm.time || !routineForm.teacher || !routineForm.room) {
        setRoutineError('All fields are required');
        return;
      }
      
      setLoadingRoutines(true);
      const newRoutine = {
        _id: Date.now(),
        subject: routineForm.subject,
        time: routineForm.time,
        teacher: routineForm.teacher,
        room: routineForm.room
      };
      setRoutines([...routines, newRoutine]);
      setRoutineForm({ subject: '', time: '', teacher: '', room: '' });
      setShowAddRoutineModal(false);
    } catch (error) {
      setRoutineError(error.message || 'Failed to add routine');
    } finally {
      setLoadingRoutines(false);
    }
  };

  const handleUpdateRoutine = async () => {
    try {
      setRoutineError('');
      if (!routineForm.subject || !routineForm.time || !routineForm.teacher || !routineForm.room) {
        setRoutineError('All fields are required');
        return;
      }
      
      setLoadingRoutines(true);
      setRoutines(routines.map(r => 
        r._id === routineEditId ? { ...r, ...routineForm } : r
      ));
      setRoutineForm({ subject: '', time: '', teacher: '', room: '' });
      setShowEditRoutineModal(false);
      setRoutineEditId(null);
    } catch (error) {
      setRoutineError(error.message || 'Failed to update routine');
    } finally {
      setLoadingRoutines(false);
    }
  };

  const handleDeleteRoutine = async (id) => {
    if (!confirm('Are you sure you want to delete this routine?')) return;
    
    try {
      setLoadingRoutines(true);
      setRoutines(routines.filter(r => r._id !== id));
    } catch (error) {
      alert('Failed to delete routine: ' + error.message);
    } finally {
      setLoadingRoutines(false);
    }
  };

  // CRUD Functions for Attendance
  const handleAddAttendance = async () => {
    try {
      setAttendanceError('');
      if (!attendanceForm.studentName || !attendanceForm.class || !attendanceForm.status || !attendanceForm.date) {
        setAttendanceError('All fields are required');
        return;
      }
      
      setLoadingAttendance(true);
      const newAttendance = {
        _id: Date.now(),
        studentName: attendanceForm.studentName,
        class: attendanceForm.class,
        status: attendanceForm.status,
        date: attendanceForm.date
      };
      setAttendanceList([...attendanceList, newAttendance]);
      setAttendanceForm({ studentName: '', class: '', status: 'Present', date: attendanceDate });
      setShowAddAttendanceModal(false);
    } catch (error) {
      setAttendanceError(error.message || 'Failed to mark attendance');
    } finally {
      setLoadingAttendance(false);
    }
  };

  const handleUpdateAttendance = async () => {
    try {
      setAttendanceError('');
      if (!attendanceForm.studentName || !attendanceForm.class || !attendanceForm.status || !attendanceForm.date) {
        setAttendanceError('All fields are required');
        return;
      }
      
      setLoadingAttendance(true);
      setAttendanceList(attendanceList.map(a => 
        a._id === attendanceEditId ? { ...a, ...attendanceForm } : a
      ));
      setAttendanceForm({ studentName: '', class: '', status: 'Present', date: attendanceDate });
      setShowEditAttendanceModal(false);
      setAttendanceEditId(null);
    } catch (error) {
      setAttendanceError(error.message || 'Failed to update attendance');
    } finally {
      setLoadingAttendance(false);
    }
  };

  const handleDeleteAttendance = async (id) => {
    if (!confirm('Are you sure you want to delete this attendance record?')) return;
    
    try {
      setLoadingAttendance(true);
      setAttendanceList(attendanceList.filter(a => a._id !== id));
    } catch (error) {
      alert('Failed to delete attendance: ' + error.message);
    } finally {
      setLoadingAttendance(false);
    }
  };

  const loadAttendanceForDate = () => {
    // In a real app, this would fetch from API based on date
    const filteredAttendance = attendanceList.filter(a => a.date === attendanceDate);
    setAttendanceList(filteredAttendance);
  };

  // Home Section
  const renderHome = () => (
    <div style={{ padding: '20px', backgroundColor: '#f8fafc', minHeight: '100vh' }}>
      <div style={{ backgroundColor: 'white', borderRadius: '16px', padding: '24px', boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)', border: '1px solid #e5e7eb' }}>
        <div style={{
          textAlign: 'center',
          marginBottom: '32px',
          padding: '20px',
          background: 'linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%)',
          borderRadius: '12px',
          color: 'white'
        }}>
          <h1 style={{ 
            fontSize: '32px', 
            fontWeight: '700', 
            margin: '0 0 8px 0',
            textShadow: '0 2px 4px rgba(0,0,0,0.1)'
          }}>
            Welcome to LearnX Admin Dashboard!
          </h1>
          <p style={{ 
            fontSize: '16px', 
            margin: 0, 
            opacity: 0.9 
          }}>
            Manage your educational platform with ease
          </p>
        </div>
        
        <div style={{ 
          display: 'grid', 
          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', 
          gap: '24px', 
          marginBottom: '32px' 
        }}>
          <div style={{ 
            background: 'linear-gradient(135deg, #3b82f6 0%, #2563eb 100%)', 
            borderRadius: '16px', 
            padding: '24px', 
            color: 'white',
            textAlign: 'center',
            boxShadow: '0 4px 6px rgba(59, 130, 246, 0.25)'
          }}>
            <div style={{ fontSize: '48px', marginBottom: '12px' }}>👥</div>
            <h3 style={{ margin: '0 0 8px 0', fontSize: '18px', fontWeight: '600' }}>Total Students</h3>
            <p style={{ margin: 0, fontSize: '32px', fontWeight: '700' }}>{students.length}</p>
          </div>
          
          <div style={{ 
            background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)', 
            borderRadius: '16px', 
            padding: '24px', 
            color: 'white',
            textAlign: 'center',
            boxShadow: '0 4px 6px rgba(16, 185, 129, 0.25)'
          }}>
            <div style={{ fontSize: '48px', marginBottom: '12px' }}>📚</div>
            <h3 style={{ margin: '0 0 8px 0', fontSize: '18px', fontWeight: '600' }}>Class Routines</h3>
            <p style={{ margin: 0, fontSize: '32px', fontWeight: '700' }}>{routines.length}</p>
          </div>
          
          <div style={{ 
            background: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)', 
            borderRadius: '16px', 
            padding: '24px', 
            color: 'white',
            textAlign: 'center',
            boxShadow: '0 4px 6px rgba(245, 158, 11, 0.25)'
          }}>
            <div style={{ fontSize: '48px', marginBottom: '12px' }}>📊</div>
            <h3 style={{ margin: '0 0 8px 0', fontSize: '18px', fontWeight: '600' }}>Reports</h3>
            <p style={{ margin: 0, fontSize: '32px', fontWeight: '700' }}>{reports.length}</p>
          </div>
          
          <div style={{ 
            background: 'linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%)', 
            borderRadius: '16px', 
            padding: '24px', 
            color: 'white',
            textAlign: 'center',
            boxShadow: '0 4px 6px rgba(139, 92, 246, 0.25)'
          }}>
            <div style={{ fontSize: '48px', marginBottom: '12px' }}>✅</div>
            <h3 style={{ margin: '0 0 8px 0', fontSize: '18px', fontWeight: '600' }}>Attendance Records</h3>
            <p style={{ margin: 0, fontSize: '32px', fontWeight: '700' }}>{attendanceList.length}</p>
          </div>
        </div>

        <div style={{
          background: 'linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)',
          borderRadius: '12px',
          padding: '24px',
          border: '1px solid #e5e7eb'
        }}>
          <h3 style={{ 
            color: '#2563eb', 
            fontSize: '20px', 
            fontWeight: '600', 
            marginBottom: '16px',
            textAlign: 'center'
          }}>
            Quick Actions
          </h3>
          <div style={{ 
            display: 'grid', 
            gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', 
            gap: '16px' 
          }}>
            <button
              onClick={() => setSection('students')}
              style={{
                background: '#2563eb',
                color: 'white',
                border: 'none',
                borderRadius: '8px',
                padding: '12px 16px',
                fontSize: '14px',
                fontWeight: '600',
                cursor: 'pointer',
                transition: 'all 0.2s',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                gap: '8px'
              }}
              onMouseEnter={(e) => e.target.style.backgroundColor = '#1d4ed8'}
              onMouseLeave={(e) => e.target.style.backgroundColor = '#2563eb'}
            >
              👥 Manage Students
            </button>
            <button
              onClick={() => setSection('routines')}
              style={{
                background: '#10b981',
                color: 'white',
                border: 'none',
                borderRadius: '8px',
                padding: '12px 16px',
                fontSize: '14px',
                fontWeight: '600',
                cursor: 'pointer',
                transition: 'all 0.2s',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                gap: '8px'
              }}
              onMouseEnter={(e) => e.target.style.backgroundColor = '#059669'}
              onMouseLeave={(e) => e.target.style.backgroundColor = '#10b981'}
            >
              📚 Class Routines
            </button>
            <button
              onClick={() => setSection('attendance')}
              style={{
                background: '#8b5cf6',
                color: 'white',
                border: 'none',
                borderRadius: '8px',
                padding: '12px 16px',
                fontSize: '14px',
                fontWeight: '600',
                cursor: 'pointer',
                transition: 'all 0.2s',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                gap: '8px'
              }}
              onMouseEnter={(e) => e.target.style.backgroundColor = '#7c3aed'}
              onMouseLeave={(e) => e.target.style.backgroundColor = '#8b5cf6'}
            >
              ✅ Attendance
            </button>
            <button
              onClick={() => setSection('reports')}
              style={{
                background: '#f59e0b',
                color: 'white',
                border: 'none',
                borderRadius: '8px',
                padding: '12px 16px',
                fontSize: '14px',
                fontWeight: '600',
                cursor: 'pointer',
                transition: 'all 0.2s',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                gap: '8px'
              }}
              onMouseEnter={(e) => e.target.style.backgroundColor = '#d97706'}
              onMouseLeave={(e) => e.target.style.backgroundColor = '#f59e0b'}
            >
              📊 View Reports
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  // Students Section
  const renderStudents = () => (
    <div style={{ padding: '20px', backgroundColor: '#f8fafc', minHeight: '100vh' }}>
      <motion.div
        key="students-section"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: 20 }}
        transition={{ duration: 0.4 }}
        style={{
          backgroundColor: 'white',
          borderRadius: '16px',
          padding: '24px',
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)',
          border: '1px solid #e5e7eb'
        }}
      >
        <h2 style={{ 
          color: '#2563eb', 
          fontSize: '24px', 
          fontWeight: '600', 
          marginBottom: '20px',
          textAlign: 'center'
        }}>
          Manage Students
        </h2>
        {loadingStudents ? <p>Loading...</p> : (
          <>
            <div style={{ 
              overflowX: 'auto',
              WebkitOverflowScrolling: 'touch',
              borderRadius: '12px',
              boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
            }}>
              <table style={{
                width: '100%',
                minWidth: '600px',
                borderCollapse: 'collapse',
                backgroundColor: 'white'
              }}>
                <thead>
                  <tr style={{ backgroundColor: '#374151', color: 'white' }}>
                    <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600', minWidth: '60px' }}>#</th>
                    <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600', minWidth: '150px' }}>NAME</th>
                    <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600', minWidth: '200px' }}>EMAIL</th>
                    <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600', minWidth: '120px' }}>COURSE</th>
                    <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600', minWidth: '100px' }}>FEES</th>
                    <th style={{ padding: '16px', textAlign: 'center', fontWeight: '600', minWidth: '150px' }}>ACTIONS</th>
                  </tr>
                </thead>
                <tbody>
                  {students.length === 0 && (
                    <tr>
                      <td colSpan="6" style={{ 
                        padding: '20px', 
                        textAlign: 'center', 
                        color: '#6b7280',
                        fontStyle: 'italic'
                      }}>
                        No students found. Add your first student!
                      </td>
                    </tr>
                  )}
                  {students.map((student, index) => (
                    <tr key={student._id || index} style={{ 
                      borderBottom: '1px solid #e5e7eb',
                      transition: 'background-color 0.2s'
                    }}
                    onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#f8fafc'}
                    onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}
                    >
                      <td style={{ padding: '16px', fontWeight: '500' }}>{index + 1}</td>
                      <td style={{ padding: '16px', fontWeight: '600' }}>{student.name}</td>
                      <td style={{ padding: '16px', color: '#2563eb' }}>{student.email}</td>
                      <td style={{ padding: '16px' }}>{student.course}</td>
                      <td style={{ padding: '16px', color: '#059669', fontWeight: '600' }}>{student.fees}</td>
                      <td style={{ padding: '16px' }}>
                        <div style={{ 
                          display: 'flex', 
                          gap: '8px', 
                          justifyContent: 'center',
                          flexWrap: 'wrap'
                        }}>
                          <button
                            onClick={() => {
                              setStudentForm(student);
                              setStudentEditId(student._id);
                              setShowEditStudentModal(true);
                              setStudentError('');
                            }}
                            style={{
                              backgroundColor: '#3b82f6',
                              color: 'white',
                              border: 'none',
                              padding: '8px 12px',
                              borderRadius: '6px',
                              cursor: 'pointer',
                              fontSize: '12px',
                              fontWeight: '500',
                              display: 'flex',
                              alignItems: 'center',
                              gap: '4px',
                              transition: 'all 0.2s',
                              minWidth: '60px',
                              justifyContent: 'center'
                            }}
                            onMouseEnter={(e) => {
                              e.target.style.backgroundColor = '#2563eb';
                              e.target.style.transform = 'translateY(-1px)';
                            }}
                            onMouseLeave={(e) => {
                              e.target.style.backgroundColor = '#3b82f6';
                              e.target.style.transform = 'translateY(0)';
                            }}
                          >
                            <FaEdit />
                            <span style={{ display: window.innerWidth > 768 ? 'inline' : 'none' }}>Edit</span>
                          </button>
                          <button
                            onClick={() => handleDeleteStudent(student._id)}
                            disabled={loadingStudents}
                            style={{
                              backgroundColor: '#ef4444',
                              color: 'white',
                              border: 'none',
                              padding: '8px 12px',
                              borderRadius: '6px',
                              cursor: loadingStudents ? 'not-allowed' : 'pointer',
                              fontSize: '12px',
                              fontWeight: '500',
                              display: 'flex',
                              alignItems: 'center',
                              gap: '4px',
                              opacity: loadingStudents ? 0.6 : 1,
                              transition: 'all 0.2s',
                              minWidth: '60px',
                              justifyContent: 'center'
                            }}
                            onMouseEnter={(e) => {
                              if (!loadingStudents) {
                                e.target.style.backgroundColor = '#dc2626';
                                e.target.style.transform = 'translateY(-1px)';
                              }
                            }}
                            onMouseLeave={(e) => {
                              if (!loadingStudents) {
                                e.target.style.backgroundColor = '#ef4444';
                                e.target.style.transform = 'translateY(0)';
                              }
                            }}
                          >
                            <FaTrash />
                            <span style={{ display: window.innerWidth > 768 ? 'inline' : 'none' }}>Delete</span>
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            
            <div style={{ textAlign: 'center', marginTop: '20px' }}>
              <button 
                onClick={() => { 
                  setShowAddStudentModal(true); 
                  setStudentError(''); 
                  setStudentForm({ name: '', email: '', course: '' });
                }}
                style={{
                  backgroundColor: '#2563eb',
                  color: 'white',
                  border: 'none',
                  padding: '12px 24px',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  fontSize: '16px',
                  fontWeight: '600',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '8px',
                  margin: '0 auto',
                  transition: 'background-color 0.2s'
                }}
                onMouseEnter={(e) => e.target.style.backgroundColor = '#1d4ed8'}
                onMouseLeave={(e) => e.target.style.backgroundColor = '#2563eb'}
              >
                <span style={{ fontSize: '18px' }}>➕</span> Add Student
              </button>
            </div>

            {/* Add Student Modal */}
            <Modal isOpen={showAddStudentModal} onClose={() => setShowAddStudentModal(false)} title="Add Student">
              <form onSubmit={e => { e.preventDefault(); handleAddStudent(); }} style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
                <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>
                  <label style={{ fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                    Name <span style={{ color: '#ef4444' }}>*</span>
                  </label>
                  <input
                    value={studentForm.name}
                    onChange={e => setStudentForm({ ...studentForm, name: e.target.value })}
                    placeholder="e.g., John Doe"
                    required
                    style={{
                      padding: '8px 12px',
                      border: '1px solid #d1d5db',
                      borderRadius: '6px',
                      fontSize: '14px',
                      background: '#ffffff',
                      outline: 'none',
                      transition: 'border-color 0.2s ease',
                    }}
                    onFocus={(e) => e.target.style.borderColor = '#2563eb'}
                    onBlur={(e) => e.target.style.borderColor = '#d1d5db'}
                  />
                </div>
                <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>
                  <label style={{ fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                    Email <span style={{ color: '#ef4444' }}>*</span>
                  </label>
                  <input
                    type="email"
                    value={studentForm.email}
                    onChange={e => setStudentForm({ ...studentForm, email: e.target.value })}
                    placeholder="e.g., john@example.com"
                    required
                    style={{
                      padding: '8px 12px',
                      border: '1px solid #d1d5db',
                      borderRadius: '6px',
                      fontSize: '14px',
                      background: '#ffffff',
                      outline: 'none',
                      transition: 'border-color 0.2s ease',
                    }}
                    onFocus={(e) => e.target.style.borderColor = '#2563eb'}
                    onBlur={(e) => e.target.style.borderColor = '#d1d5db'}
                  />
                </div>
                <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>
                  <label style={{ fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                    Course <span style={{ color: '#ef4444' }}>*</span>
                  </label>
                  <input
                    value={studentForm.course}
                    onChange={e => setStudentForm({ ...studentForm, course: e.target.value })}
                    placeholder="e.g., Computer Science"
                    required
                    style={{
                      padding: '8px 12px',
                      border: '1px solid #d1d5db',
                      borderRadius: '6px',
                      fontSize: '14px',
                      background: '#ffffff',
                      outline: 'none',
                      transition: 'border-color 0.2s ease',
                    }}
                    onFocus={(e) => e.target.style.borderColor = '#2563eb'}
                    onBlur={(e) => e.target.style.borderColor = '#d1d5db'}
                  />
                </div>
                {studentError && <div style={{ color: '#ef4444', fontSize: '14px' }}>{studentError}</div>}
                <div style={{ display: 'flex', gap: '12px', justifyContent: 'flex-end', marginTop: '20px' }}>
                  <button 
                    type="button" 
                    onClick={() => setShowAddStudentModal(false)}
                    style={{
                      padding: '8px 16px',
                      border: '1px solid #d1d5db',
                      borderRadius: '6px',
                      background: '#ffffff',
                      color: '#374151',
                      cursor: 'pointer',
                      fontSize: '14px',
                      fontWeight: '500'
                    }}
                  >
                    Cancel
                  </button>
                  <button 
                    type="submit" 
                    disabled={loadingStudents}
                    style={{
                      padding: '8px 16px',
                      border: 'none',
                      borderRadius: '6px',
                      background: loadingStudents ? '#9ca3af' : '#2563eb',
                      color: '#ffffff',
                      cursor: loadingStudents ? 'not-allowed' : 'pointer',
                      fontSize: '14px',
                      fontWeight: '500'
                    }}
                  >
                    {loadingStudents ? 'Adding...' : 'Add Student'}
                  </button>
                </div>
              </form>
            </Modal>

            {/* Edit Student Modal */}
            <Modal isOpen={showEditStudentModal} onClose={() => setShowEditStudentModal(false)} title="Edit Student">
              <form onSubmit={e => { e.preventDefault(); handleUpdateStudent(); }} style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
                <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>
                  <label style={{ fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                    Name <span style={{ color: '#ef4444' }}>*</span>
                  </label>
                  <input
                    value={studentForm.name}
                    onChange={e => setStudentForm({ ...studentForm, name: e.target.value })}
                    placeholder="e.g., John Doe"
                    required
                    style={{
                      padding: '8px 12px',
                      border: '1px solid #d1d5db',
                      borderRadius: '6px',
                      fontSize: '14px',
                      background: '#ffffff',
                      outline: 'none',
                      transition: 'border-color 0.2s ease',
                    }}
                    onFocus={(e) => e.target.style.borderColor = '#2563eb'}
                    onBlur={(e) => e.target.style.borderColor = '#d1d5db'}
                  />
                </div>
                <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>
                  <label style={{ fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                    Email <span style={{ color: '#ef4444' }}>*</span>
                  </label>
                  <input
                    type="email"
                    value={studentForm.email}
                    onChange={e => setStudentForm({ ...studentForm, email: e.target.value })}
                    placeholder="e.g., john@example.com"
                    required
                    style={{
                      padding: '8px 12px',
                      border: '1px solid #d1d5db',
                      borderRadius: '6px',
                      fontSize: '14px',
                      background: '#ffffff',
                      outline: 'none',
                      transition: 'border-color 0.2s ease',
                    }}
                    onFocus={(e) => e.target.style.borderColor = '#2563eb'}
                    onBlur={(e) => e.target.style.borderColor = '#d1d5db'}
                  />
                </div>
                <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>
                  <label style={{ fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                    Course <span style={{ color: '#ef4444' }}>*</span>
                  </label>
                  <input
                    value={studentForm.course}
                    onChange={e => setStudentForm({ ...studentForm, course: e.target.value })}
                    placeholder="e.g., Computer Science"
                    required
                    style={{
                      padding: '8px 12px',
                      border: '1px solid #d1d5db',
                      borderRadius: '6px',
                      fontSize: '14px',
                      background: '#ffffff',
                      outline: 'none',
                      transition: 'border-color 0.2s ease',
                    }}
                    onFocus={(e) => e.target.style.borderColor = '#2563eb'}
                    onBlur={(e) => e.target.style.borderColor = '#d1d5db'}
                  />
                </div>
                {studentError && <div style={{ color: '#ef4444', fontSize: '14px' }}>{studentError}</div>}
                <div style={{ display: 'flex', gap: '12px', justifyContent: 'flex-end', marginTop: '20px' }}>
                  <button 
                    type="button" 
                    onClick={() => setShowEditStudentModal(false)}
                    style={{
                      padding: '8px 16px',
                      border: '1px solid #d1d5db',
                      borderRadius: '6px',
                      background: '#ffffff',
                      color: '#374151',
                      cursor: 'pointer',
                      fontSize: '14px',
                      fontWeight: '500'
                    }}
                  >
                    Cancel
                  </button>
                  <button 
                    type="submit" 
                    disabled={loadingStudents}
                    style={{
                      padding: '8px 16px',
                      border: 'none',
                      borderRadius: '6px',
                      background: loadingStudents ? '#9ca3af' : '#2563eb',
                      color: '#ffffff',
                      cursor: loadingStudents ? 'not-allowed' : 'pointer',
                      fontSize: '14px',
                      fontWeight: '500'
                    }}
                  >
                    {loadingStudents ? 'Updating...' : 'Update Student'}
                  </button>
                </div>
              </form>
            </Modal>
          </>
        )}
      </motion.div>
    </div>
  );

  // Reports Section with full CRUD
  const renderReports = () => (
    <div style={{ padding: '20px', backgroundColor: '#f8fafc', minHeight: '100vh' }}>
      <motion.div
        style={{
          backgroundColor: 'white',
          borderRadius: '16px',
          padding: '24px',
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)',
          border: '1px solid #e5e7eb'
        }}
      >
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
          <h2 style={{ 
            color: '#1f2937', 
            fontSize: '24px', 
            fontWeight: '600', 
            margin: 0,
            borderBottom: '2px solid #e5e7eb',
            paddingBottom: '10px'
          }}>
            रिपोर्ट व्यवस्थापन
          </h2>
          <button
            onClick={() => {
              setReportForm({ title: '', student: '', grades: '' });
              setShowAddReportModal(true);
              setReportError('');
            }}
            style={{
              backgroundColor: '#f59e0b',
              color: 'white',
              border: 'none',
              padding: '12px 24px',
              borderRadius: '6px',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: '600'
            }}
          >
            + रिपोर्ट थप्नुहोस्
          </button>
        </div>
        
        {loadingReports ? (
          <p style={{ textAlign: 'center', color: '#6b7280' }}>लोड हुँदैछ...</p>
        ) : (
          <table style={{
            width: '100%',
            borderCollapse: 'collapse',
            backgroundColor: 'white',
            borderRadius: '8px',
            overflow: 'hidden',
            border: '1px solid #e5e7eb'
          }}>
            <thead>
              <tr style={{ backgroundColor: '#374151', color: 'white' }}>
                <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600' }}>शीर्षक</th>
                <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600' }}>विद्यार्थी</th>
                <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600' }}>ग्रेड</th>
                <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600' }}>मिति</th>
                <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600' }}>कार्यहरू</th>
              </tr>
            </thead>
            <tbody>
              {reports.map((report) => (
                <tr key={report.id} style={{ borderBottom: '1px solid #e5e7eb' }}>
                  <td style={{ padding: '16px', fontWeight: '500' }}>{report.title}</td>
                  <td style={{ padding: '16px' }}>{report.student}</td>
                  <td style={{ padding: '16px', color: '#059669', fontWeight: '600' }}>{report.grades}</td>
                  <td style={{ padding: '16px' }}>{report.date}</td>
                  <td style={{ padding: '16px' }}>
                    <div style={{ display: 'flex', gap: '8px' }}>
                      <button
                        onClick={() => {
                          setReportForm(report);
                          setReportEditId(report.id);
                          setShowEditReportModal(true);
                          setReportError('');
                        }}
                        style={{
                          backgroundColor: '#3b82f6',
                          color: 'white',
                          border: 'none',
                          padding: '6px 12px',
                          borderRadius: '4px',
                          cursor: 'pointer',
                          fontSize: '12px'
                        }}
                      >
                        <FaEdit />
                      </button>
                      <button
                        onClick={() => handleDeleteReport(report.id)}
                        style={{
                          backgroundColor: '#ef4444',
                          color: 'white',
                          border: 'none',
                          padding: '6px 12px',
                          borderRadius: '4px',
                          cursor: 'pointer',
                          fontSize: '12px'
                        }}
                      >
                        <FaTrash />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </motion.div>
    </div>
  );

  // Enhanced Routines Section with full CRUD
  const renderRoutines = () => (
    <div style={{ padding: '20px', backgroundColor: '#f8fafc', minHeight: '100vh' }}>
      <motion.div
        style={{
          backgroundColor: 'white',
          borderRadius: '16px',
          padding: '24px',
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)',
          border: '1px solid #e5e7eb'
        }}
      >
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
          <h2 style={{ 
            color: '#1f2937', 
            fontSize: '24px', 
            fontWeight: '600', 
            margin: 0,
            borderBottom: '2px solid #e5e7eb',
            paddingBottom: '10px'
          }}>
            Class Routine Management
          </h2>
          <button
            onClick={() => {
              setRoutineForm({ subject: '', time: '', teacher: '', room: '', day: '' });
              setShowAddRoutineModal(true);
              setRoutineError('');
            }}
            style={{
              backgroundColor: '#22c55e',
              color: 'white',
              border: 'none',
              padding: '12px 24px',
              borderRadius: '6px',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: '600'
            }}
          >
            + Add Routine
          </button>
        </div>
        
        {loadingRoutines ? (
          <p style={{ textAlign: 'center', color: '#6b7280' }}>Loading...</p>
        ) : (
          <table style={{
            width: '100%',
            borderCollapse: 'collapse',
            backgroundColor: 'white',
            borderRadius: '8px',
            overflow: 'hidden',
            border: '1px solid #e5e7eb'
          }}>
            <thead>
              <tr style={{ backgroundColor: '#374151', color: 'white' }}>
                <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600' }}>Subject</th>
                <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600' }}>Time</th>
                <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600' }}>Teacher</th>
                <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600' }}>Room</th>
                <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600' }}>Day</th>
                <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600' }}>Actions</th>
              </tr>
            </thead>
            <tbody>
              {routines.map((routine) => (
                <tr key={routine._id} style={{ borderBottom: '1px solid #e5e7eb' }}>
                  <td style={{ padding: '16px', fontWeight: '500', color: '#059669' }}>{routine.subject}</td>
                  <td style={{ padding: '16px' }}>{routine.time}</td>
                  <td style={{ padding: '16px' }}>{routine.teacher}</td>
                  <td style={{ padding: '16px' }}>{routine.room}</td>
                  <td style={{ padding: '16px' }}>{routine.day}</td>
                  <td style={{ padding: '16px' }}>
                    <div style={{ display: 'flex', gap: '8px' }}>
                      <button
                        onClick={() => {
                          setRoutineForm(routine);
                          setRoutineEditId(routine._id);
                          setShowEditRoutineModal(true);
                          setRoutineError('');
                        }}
                        style={{
                          backgroundColor: '#3b82f6',
                          color: 'white',
                          border: 'none',
                          padding: '6px 12px',
                          borderRadius: '4px',
                          cursor: 'pointer',
                          fontSize: '12px'
                        }}
                      >
                        <FaEdit />
                      </button>
                      <button
                        onClick={() => handleDeleteRoutine(routine._id)}
                        style={{
                          backgroundColor: '#ef4444',
                          color: 'white',
                          border: 'none',
                          padding: '6px 12px',
                          borderRadius: '4px',
                          cursor: 'pointer',
                          fontSize: '12px'
                        }}
                      >
                        <FaTrash />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </motion.div>
    </div>
  );

  // Enhanced Attendance Section with full CRUD
  const renderAttendance = () => (
    <div style={{ padding: '20px', backgroundColor: '#f8fafc', minHeight: '100vh' }}>
      <motion.div
        style={{
          backgroundColor: 'white',
          borderRadius: '16px',
          padding: '24px',
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)',
          border: '1px solid #e5e7eb'
        }}
      >
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
          <h2 style={{ 
            color: '#1f2937', 
            fontSize: '24px', 
            fontWeight: '600', 
            margin: 0,
            borderBottom: '2px solid #e5e7eb',
            paddingBottom: '10px'
          }}>
            उपस्थिति व्यवस्थापन
          </h2>
          <button
            onClick={() => {
              setAttendanceForm({ studentName: '', class: '', status: 'उपस्थित', date: attendanceDate });
              setShowAddAttendanceModal(true);
              setAttendanceError('');
            }}
            style={{
              backgroundColor: '#8b5cf6',
              color: 'white',
              border: 'none',
              padding: '12px 24px',
              borderRadius: '6px',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: '600'
            }}
          >
            + उपस्थिति थप्नुहोस्
          </button>
        </div>
        
        {loadingAttendance ? (
          <p style={{ textAlign: 'center', color: '#6b7280' }}>लोड हुँदैछ...</p>
        ) : (
          <table style={{
            width: '100%',
            borderCollapse: 'collapse',
            backgroundColor: 'white',
            borderRadius: '8px',
            overflow: 'hidden',
            border: '1px solid #e5e7eb'
          }}>
            <thead>
              <tr style={{ backgroundColor: '#374151', color: 'white' }}>
                <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600' }}>विद्यार्थीको नाम</th>
                <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600' }}>कक्षा</th>
                <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600' }}>स्थिति</th>
                <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600' }}>मिति</th>
                <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600' }}>कार्यहरू</th>
              </tr>
            </thead>
            <tbody>
              {attendanceList.map((attendance) => (
                <tr key={attendance._id} style={{ borderBottom: '1px solid #e5e7eb' }}>
                  <td style={{ padding: '16px', fontWeight: '500' }}>{attendance.studentName}</td>
                  <td style={{ padding: '16px' }}>{attendance.class}</td>
                  <td style={{ 
                    padding: '16px', 
                    color: attendance.status === 'उपस्थित' ? '#059669' : '#dc2626',
                    fontWeight: '600'
                  }}>
                    {attendance.status}
                  </td>
                  <td style={{ padding: '16px' }}>{attendance.date}</td>
                  <td style={{ padding: '16px' }}>
                    <div style={{ display: 'flex', gap: '8px' }}>
                      <button
                        onClick={() => {
                          setAttendanceForm(attendance);
                          setAttendanceEditId(attendance._id);
                          setShowEditAttendanceModal(true);
                          setAttendanceError('');
                        }}
                        style={{
                          backgroundColor: '#3b82f6',
                          color: 'white',
                          border: 'none',
                          padding: '6px 12px',
                          borderRadius: '4px',
                          cursor: 'pointer',
                          fontSize: '12px'
                        }}
                      >
                        <FaEdit />
                      </button>
                      <button
                        onClick={() => handleDeleteAttendance(attendance._id)}
                        style={{
                          backgroundColor: '#ef4444',
                          color: 'white',
                          border: 'none',
                          padding: '6px 12px',
                          borderRadius: '4px',
                          cursor: 'pointer',
                          fontSize: '12px'
                        }}
                      >
                        <FaTrash />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </motion.div>
    </div>
  );

  // Fees Management Section
  const renderFees = () => (
    <div style={{ padding: '20px', backgroundColor: '#f8fafc', minHeight: '100vh' }}>
      <motion.div
        style={{
          backgroundColor: 'white',
          borderRadius: '16px',
          padding: '24px',
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)',
          border: '1px solid #e5e7eb'
        }}
      >
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
          <h2 style={{ 
            color: '#1f2937', 
            fontSize: '24px', 
            fontWeight: '600', 
            margin: 0,
            borderBottom: '2px solid #e5e7eb',
            paddingBottom: '10px'
          }}>
            शुल्क व्यवस्थापन
          </h2>
        </div>
        
        <table style={{
          width: '100%',
          borderCollapse: 'collapse',
          backgroundColor: 'white',
          borderRadius: '8px',
          overflow: 'hidden',
          border: '1px solid #e5e7eb'
        }}>
          <thead>
            <tr style={{ backgroundColor: '#374151', color: 'white' }}>
              <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600' }}>विद्यार्थीको नाम</th>
              <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600' }}>कक्षा</th>
              <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600' }}>रकम</th>
              <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600' }}>स्थिति</th>
              <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600' }}>अन्तिम मिति</th>
            </tr>
          </thead>
          <tbody>
            {fees.map((fee) => (
              <tr key={fee._id} style={{ borderBottom: '1px solid #e5e7eb' }}>
                <td style={{ padding: '16px', fontWeight: '500' }}>{fee.studentName}</td>
                <td style={{ padding: '16px' }}>{fee.class}</td>
                <td style={{ padding: '16px', color: '#059669', fontWeight: '600' }}>{fee.amount}</td>
                <td style={{ 
                  padding: '16px', 
                  color: fee.status === 'भुक्तानी भएको' ? '#059669' : '#dc2626',
                  fontWeight: '600'
                }}>
                  {fee.status}
                </td>
                <td style={{ padding: '16px' }}>{fee.dueDate}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </motion.div>
    </div>
  );

  // Learning Materials Section
  const renderLearningMaterials = () => (
    <div style={{ padding: '20px', backgroundColor: '#f8fafc', minHeight: '100vh' }}>
      <motion.div
        style={{
          backgroundColor: 'white',
          borderRadius: '16px',
          padding: '24px',
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)',
          border: '1px solid #e5e7eb'
        }}
      >
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
          <h2 style={{ 
            color: '#1f2937', 
            fontSize: '24px', 
            fontWeight: '600', 
            margin: 0,
            borderBottom: '2px solid #e5e7eb',
            paddingBottom: '10px'
          }}>
            शिक्षण सामग्री व्यवस्थापन
          </h2>
        </div>
        
        <div style={{ 
          display: 'grid', 
          gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', 
          gap: '20px' 
        }}>
          {learningMaterials.map((material) => (
            <div key={material._id} style={{
              backgroundColor: '#f8fafc',
              border: '1px solid #e5e7eb',
              borderRadius: '12px',
              padding: '20px',
              transition: 'transform 0.2s, box-shadow 0.2s'
            }}>
              <h3 style={{ 
                color: '#1f2937', 
                fontSize: '18px', 
                fontWeight: '600', 
                marginBottom: '8px' 
              }}>
                {material.title}
              </h3>
              <p style={{ color: '#6b7280', marginBottom: '4px' }}>विषय: {material.subject}</p>
              <p style={{ color: '#6b7280', marginBottom: '4px' }}>कक्षा: {material.class}</p>
              <p style={{ color: '#6b7280', marginBottom: '8px' }}>प्रकार: {material.type}</p>
              <p style={{ color: '#374151', fontSize: '14px' }}>अपलोड मिति: {material.uploadDate}</p>
            </div>
          ))}
        </div>
      </motion.div>
    </div>
  );

  // Notifications Section
  const renderNotifications = () => (
    <div style={{ padding: '20px', backgroundColor: '#f8fafc', minHeight: '100vh' }}>
      <motion.div
        style={{
          backgroundColor: 'white',
          borderRadius: '16px',
          padding: '24px',
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)',
          border: '1px solid #e5e7eb'
        }}
      >
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
          <h2 style={{ 
            color: '#1f2937', 
            fontSize: '24px', 
            fontWeight: '600', 
            margin: 0,
            borderBottom: '2px solid #e5e7eb',
            paddingBottom: '10px'
          }}>
            सूचना व्यवस्थापन
          </h2>
        </div>
        
        <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
          {notifications.map((notification) => (
            <div key={notification._id} style={{
              backgroundColor: '#f8fafc',
              border: '1px solid #e5e7eb',
              borderRadius: '12px',
              padding: '20px',
              borderLeft: `4px solid ${
                notification.priority === 'उच्च' ? '#ef4444' : 
                notification.priority === 'मध्यम' ? '#f59e0b' : '#22c55e'
              }`
            }}>
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start' }}>
                <div>
                  <h3 style={{ 
                    color: '#1f2937', 
                    fontSize: '18px', 
                    fontWeight: '600', 
                    marginBottom: '8px' 
                  }}>
                    {notification.title}
                  </h3>
                  <p style={{ color: '#6b7280', marginBottom: '8px' }}>{notification.message}</p>
                  <div style={{ display: 'flex', gap: '16px', fontSize: '14px' }}>
                    <span style={{ 
                      color: notification.priority === 'उच्च' ? '#ef4444' : 
                             notification.priority === 'मध्यम' ? '#f59e0b' : '#22c55e',
                      fontWeight: '600'
                    }}>
                      प्राथमिकता: {notification.priority}
                    </span>
                    <span style={{ color: '#374151' }}>मिति: {notification.date}</span>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </motion.div>
    </div>
  );

  // Enhanced Courses Section with modals
  const renderCourses = () => (
    <div style={{ padding: '20px', backgroundColor: '#f8fafc', minHeight: '100vh' }}>
      <motion.div
        style={{
          backgroundColor: 'white',
          borderRadius: '16px',
          padding: '24px',
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)',
          border: '1px solid #e5e7eb'
        }}
      >
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px', flexWrap: 'wrap', gap: '16px' }}>
          <h2 style={{ 
            color: '#1f2937', 
            fontSize: '24px', 
            fontWeight: '600', 
            margin: 0,
            borderBottom: '2px solid #e5e7eb',
            paddingBottom: '10px'
          }}>
            Course Management
          </h2>
          <button
            onClick={() => {
              setCourseForm({ title: '', description: '', instructor: '', duration: '' });
              setShowAddCourseModal(true);
              setCourseError('');
            }}
            style={{
              backgroundColor: '#2563eb',
              color: 'white',
              border: 'none',
              padding: '12px 24px',
              borderRadius: '6px',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: '600',
              transition: 'all 0.2s'
            }}
            onMouseEnter={(e) => e.target.style.backgroundColor = '#1d4ed8'}
            onMouseLeave={(e) => e.target.style.backgroundColor = '#2563eb'}
          >
            + Add Course
          </button>
        </div>
        
        <div style={{ 
          display: 'grid', 
          gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', 
          gap: '24px' 
        }}>
          {courses.map((course) => (
            <div key={course._id} style={{
              backgroundColor: '#f8fafc',
              border: '1px solid #e5e7eb',
              borderRadius: '12px',
              padding: '24px',
              transition: 'transform 0.2s, box-shadow 0.2s'
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.transform = 'translateY(-2px)';
              e.currentTarget.style.boxShadow = '0 8px 25px rgba(0, 0, 0, 0.1)';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.transform = 'translateY(0)';
              e.currentTarget.style.boxShadow = 'none';
            }}
            >
              <h3 style={{ 
                color: '#1f2937', 
                fontSize: '20px', 
                fontWeight: '600', 
                marginBottom: '12px' 
              }}>
                {course.title}
              </h3>
              <p style={{ color: '#6b7280', marginBottom: '12px', lineHeight: '1.5' }}>
                {course.description}
              </p>
              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px', fontSize: '14px', marginBottom: '16px' }}>
                <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                  <span style={{ color: '#374151' }}>Instructor:</span>
                  <span style={{ fontWeight: '600' }}>{course.instructor}</span>
                </div>
                <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                  <span style={{ color: '#374151' }}>Duration:</span>
                  <span style={{ fontWeight: '600' }}>{course.duration}</span>
                </div>
                <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                  <span style={{ color: '#374151' }}>Students:</span>
                  <span style={{ fontWeight: '600', color: '#059669' }}>{course.students}</span>
                </div>
              </div>
              <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap' }}>
                <button
                  onClick={() => {
                    setCourseForm(course);
                    setCourseEditId(course._id);
                    setShowEditCourseModal(true);
                    setCourseError('');
                  }}
                  style={{
                    backgroundColor: '#3b82f6',
                    color: 'white',
                    border: 'none',
                    padding: '8px 16px',
                    borderRadius: '6px',
                    cursor: 'pointer',
                    fontSize: '14px',
                    flex: 1,
                    minWidth: '80px',
                    transition: 'all 0.2s'
                  }}
                  onMouseEnter={(e) => e.target.style.backgroundColor = '#2563eb'}
                  onMouseLeave={(e) => e.target.style.backgroundColor = '#3b82f6'}
                >
                  Edit
                </button>
                <button
                  onClick={() => handleDeleteCourse(course._id)}
                  style={{
                    backgroundColor: '#ef4444',
                    color: 'white',
                    border: 'none',
                    padding: '8px 16px',
                    borderRadius: '6px',
                    cursor: 'pointer',
                    fontSize: '14px',
                    minWidth: '80px',
                    transition: 'all 0.2s'
                  }}
                  onMouseEnter={(e) => e.target.style.backgroundColor = '#dc2626'}
                  onMouseLeave={(e) => e.target.style.backgroundColor = '#ef4444'}
                >
                  Delete
                </button>
              </div>
            </div>
          ))}
        </div>

        {/* Add Course Modal */}
        <Modal isOpen={showAddCourseModal} onClose={() => setShowAddCourseModal(false)} title="Add New Course">
          <form onSubmit={e => { e.preventDefault(); handleAddCourse(); }} style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
            <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>
              <label style={{ fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                Course Title <span style={{ color: '#ef4444' }}>*</span>
              </label>
              <input
                value={courseForm.title}
                onChange={e => setCourseForm({ ...courseForm, title: e.target.value })}
                placeholder="e.g., Basic Mathematics"
                required
                style={{
                  padding: '8px 12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '6px',
                  fontSize: '14px',
                  background: '#ffffff',
                  outline: 'none',
                  transition: 'border-color 0.2s ease',
                }}
                onFocus={(e) => e.target.style.borderColor = '#2563eb'}
                onBlur={(e) => e.target.style.borderColor = '#d1d5db'}
              />
            </div>
            <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>
              <label style={{ fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                Description <span style={{ color: '#ef4444' }}>*</span>
              </label>
              <textarea
                value={courseForm.description}
                onChange={e => setCourseForm({ ...courseForm, description: e.target.value })}
                placeholder="Course description..."
                required
                rows={3}
                style={{
                  padding: '8px 12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '6px',
                  fontSize: '14px',
                  background: '#ffffff',
                  outline: 'none',
                  transition: 'border-color 0.2s ease',
                  resize: 'vertical'
                }}
                onFocus={(e) => e.target.style.borderColor = '#2563eb'}
                onBlur={(e) => e.target.style.borderColor = '#d1d5db'}
              />
            </div>
            <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>
              <label style={{ fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                Instructor <span style={{ color: '#ef4444' }}>*</span>
              </label>
              <input
                value={courseForm.instructor}
                onChange={e => setCourseForm({ ...courseForm, instructor: e.target.value })}
                placeholder="e.g., Ram Bahadur"
                required
                style={{
                  padding: '8px 12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '6px',
                  fontSize: '14px',
                  background: '#ffffff',
                  outline: 'none',
                  transition: 'border-color 0.2s ease',
                }}
                onFocus={(e) => e.target.style.borderColor = '#2563eb'}
                onBlur={(e) => e.target.style.borderColor = '#d1d5db'}
              />
            </div>
            <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>
              <label style={{ fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                Duration <span style={{ color: '#ef4444' }}>*</span>
              </label>
              <input
                value={courseForm.duration}
                onChange={e => setCourseForm({ ...courseForm, duration: e.target.value })}
                placeholder="e.g., 6 months"
                required
                style={{
                  padding: '8px 12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '6px',
                  fontSize: '14px',
                  background: '#ffffff',
                  outline: 'none',
                  transition: 'border-color 0.2s ease',
                }}
                onFocus={(e) => e.target.style.borderColor = '#2563eb'}
                onBlur={(e) => e.target.style.borderColor = '#d1d5db'}
              />
            </div>
            {courseError && <div style={{ color: '#ef4444', fontSize: '14px' }}>{courseError}</div>}
            <div style={{ display: 'flex', gap: '12px', justifyContent: 'flex-end', marginTop: '20px' }}>
              <button 
                type="button" 
                onClick={() => setShowAddCourseModal(false)}
                style={{
                  padding: '8px 16px',
                  border: '1px solid #d1d5db',
                  borderRadius: '6px',
                  background: '#ffffff',
                  color: '#374151',
                  cursor: 'pointer',
                  fontSize: '14px',
                  fontWeight: '500'
                }}
              >
                Cancel
              </button>
              <button 
                type="submit" 
                disabled={loadingCourses}
                style={{
                  padding: '8px 16px',
                  border: 'none',
                  borderRadius: '6px',
                  background: loadingCourses ? '#9ca3af' : '#2563eb',
                  color: '#ffffff',
                  cursor: loadingCourses ? 'not-allowed' : 'pointer',
                  fontSize: '14px',
                  fontWeight: '500'
                }}
              >
                {loadingCourses ? 'Adding...' : 'Add Course'}
              </button>
            </div>
          </form>
        </Modal>

        {/* Edit Course Modal */}
        <Modal isOpen={showEditCourseModal} onClose={() => setShowEditCourseModal(false)} title="Edit Course">
          <form onSubmit={e => { e.preventDefault(); handleUpdateCourse(); }} style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
            <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>
              <label style={{ fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                Course Title <span style={{ color: '#ef4444' }}>*</span>
              </label>
              <input
                value={courseForm.title}
                onChange={e => setCourseForm({ ...courseForm, title: e.target.value })}
                placeholder="e.g., Basic Mathematics"
                required
                style={{
                  padding: '8px 12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '6px',
                  fontSize: '14px',
                  background: '#ffffff',
                  outline: 'none',
                  transition: 'border-color 0.2s ease',
                }}
                onFocus={(e) => e.target.style.borderColor = '#2563eb'}
                onBlur={(e) => e.target.style.borderColor = '#d1d5db'}
              />
            </div>
            <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>
              <label style={{ fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                Description <span style={{ color: '#ef4444' }}>*</span>
              </label>
              <textarea
                value={courseForm.description}
                onChange={e => setCourseForm({ ...courseForm, description: e.target.value })}
                placeholder="Course description..."
                required
                rows={3}
                style={{
                  padding: '8px 12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '6px',
                  fontSize: '14px',
                  background: '#ffffff',
                  outline: 'none',
                  transition: 'border-color 0.2s ease',
                  resize: 'vertical'
                }}
                onFocus={(e) => e.target.style.borderColor = '#2563eb'}
                onBlur={(e) => e.target.style.borderColor = '#d1d5db'}
              />
            </div>
            <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>
              <label style={{ fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                Instructor <span style={{ color: '#ef4444' }}>*</span>
              </label>
              <input
                value={courseForm.instructor}
                onChange={e => setCourseForm({ ...courseForm, instructor: e.target.value })}
                placeholder="e.g., Ram Bahadur"
                required
                style={{
                  padding: '8px 12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '6px',
                  fontSize: '14px',
                  background: '#ffffff',
                  outline: 'none',
                  transition: 'border-color 0.2s ease',
                }}
                onFocus={(e) => e.target.style.borderColor = '#2563eb'}
                onBlur={(e) => e.target.style.borderColor = '#d1d5db'}
              />
            </div>
            <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>
              <label style={{ fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                Duration <span style={{ color: '#ef4444' }}>*</span>
              </label>
              <input
                value={courseForm.duration}
                onChange={e => setCourseForm({ ...courseForm, duration: e.target.value })}
                placeholder="e.g., 6 months"
                required
                style={{
                  padding: '8px 12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '6px',
                  fontSize: '14px',
                  background: '#ffffff',
                  outline: 'none',
                  transition: 'border-color 0.2s ease',
                }}
                onFocus={(e) => e.target.style.borderColor = '#2563eb'}
                onBlur={(e) => e.target.style.borderColor = '#d1d5db'}
              />
            </div>
            {courseError && <div style={{ color: '#ef4444', fontSize: '14px' }}>{courseError}</div>}
            <div style={{ display: 'flex', gap: '12px', justifyContent: 'flex-end', marginTop: '20px' }}>
              <button 
                type="button" 
                onClick={() => setShowEditCourseModal(false)}
                style={{
                  padding: '8px 16px',
                  border: '1px solid #d1d5db',
                  borderRadius: '6px',
                  background: '#ffffff',
                  color: '#374151',
                  cursor: 'pointer',
                  fontSize: '14px',
                  fontWeight: '500'
                }}
              >
                Cancel
              </button>
              <button 
                type="submit" 
                disabled={loadingCourses}
                style={{
                  padding: '8px 16px',
                  border: 'none',
                  borderRadius: '6px',
                  background: loadingCourses ? '#9ca3af' : '#2563eb',
                  color: '#ffffff',
                  cursor: loadingCourses ? 'not-allowed' : 'pointer',
                  fontSize: '14px',
                  fontWeight: '500'
                }}
              >
                {loadingCourses ? 'Updating...' : 'Update Course'}
              </button>
            </div>
          </form>
        </Modal>
      </motion.div>
    </div>
  );

  // Main render function
  const renderContent = () => {
    switch(section) {
      case 'home':
        return renderHome();
      case 'students':
        return renderStudents();
      case 'reports':
        return renderReports();
      case 'routine':
        return renderRoutines();
      case 'attendance':
        return renderAttendance();
      case 'learning':
        return renderLearningMaterials();
      case 'fees':
        return renderFees();
      case 'notifications':
        return renderNotifications();
      case 'courses':
        return renderCourses();
      default:
        return renderHome();
    }
  };

  // Enhanced logout: clear localStorage and redirect
  const handleLogout = () => {
    localStorage.removeItem('user');
    localStorage.removeItem('token');
    navigate('/login', { replace: true });
  };

  return (
    <div style={{ display: 'flex', minHeight: '100vh', backgroundColor: '#f8fafc' }}>
      <Slidebar 
        role="admin"
        section={section} 
        onSectionChange={setSection}
        onLogout={handleLogout}
      />
      
      <div style={{ 
        flex: 1,
        marginLeft: '240px',
        minHeight: '100vh'
      }}>
        {/* Header */}
        <div style={{
          position: 'sticky',
          top: 0,
          height: '70px',
          background: 'linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%)',
          color: 'white',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          padding: '0 24px',
          boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
          zIndex: 100
        }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
            <img src={logoIcon} alt="LearnX Logo" style={{ width: '40px', height: '40px' }} />
            <h1 style={{ 
              margin: 0, 
              fontSize: '24px', 
              fontWeight: '700',
              textShadow: '0 1px 2px rgba(0,0,0,0.1)'
            }}>
              LearnX Admin Dashboard
            </h1>
          </div>
          <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
            <span style={{ fontSize: '14px', opacity: 0.9 }}>Welcome, Admin</span>
            <div style={{
              width: '32px',
              height: '32px',
              borderRadius: '50%',
              background: 'rgba(255,255,255,0.2)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontSize: '16px'
            }}>
              👤
            </div>
          </div>
        </div>
        
        {/* Main Content */}
        <div style={{ minHeight: 'calc(100vh - 70px)' }}>
          <AnimatePresence mode="wait">
            {renderContent()}
          </AnimatePresence>
        </div>
      </div>
    </div>
  );
};

export default AdminDashboard;
